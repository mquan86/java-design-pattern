{"name":"Java-design-pattern","tagline":"Java Design Pattern","body":"# Java Design Pattern\r\nA self-learning java design pattern with short introduce, diagram, practical example and source code.\r\n\r\n* Creational\r\n    * [Singleton](./wiki/Singleton.md)\r\n    * [Factory Method](./wiki/Factory-Method.md)\r\n    * [Abstract Factory](./wiki/Abstract-Factory.md)\r\n    * [Builder](./wiki/Builder.md)\r\n    * [Prototype](./wiki/Prototype.md)\r\n* Structural\r\n    * [Adapter](./wiki/Adapter.md)\r\n    * [Bridge](./wiki/Bridge.md)\r\n    * [Composite](./wiki/Composite.md)\r\n    * [Decorator](./wiki/Decorator.md)\r\n    * [Facade](./wiki/Facade.md)\r\n    * [Flyweight](./wiki/Flyweight.md)\r\n    * [Proxy](./wiki/Proxy.md)\r\n* Behavior\r\n    * [Observer](./wiki/Observer.md)\r\n    * [State](./wiki/State.md)\r\n    * [Strategy](./wiki/Strategy.md)\r\n    * [Template](./wiki/Template-Method.md)\r\n    * [Visitor](./wiki/Visitor.md)\r\n    * [Chain Of Responsibility](./wiki/Chain-Of-Responsibility.md)\r\n    * [Command](./wiki/Command.md)\r\n    * [Interpreter](./wiki/Interpreter.md)\r\n    * [Iterator](./wiki/Iterator.md)\r\n    * [Mediator](./wiki/Mediator.md)\r\n    * [Memento](./wiki/Memento.md)\r\n\r\n## Support or Contact\r\nBug & issues can be post in [issues tracker](https://github.com/mquan86/java-design-pattern/issues)\r\n\r\nEmail: mquan86 [ at ] gmail[ dot ]com","google":"UA-66677101-1","note":"Don't delete this file! It's used internally to help with page regeneration."}